https://machinelearningmastery.com/tutorial-first-neural-network-python-keras/
https://www.tensorflow.org/tensorboard/get_started

from numpy import loadtxt
from numpy import array
import os
import tensorflow as tf
from pathlib import Path

l1 = loadtxt('processed/engnet.txt', delimiter=',')
l2 = loadtxt('processed/cmn2006.txt', delimiter=',')
l2 = array(l2)



def doModel(i, epochcnt=500):
  print("doing " + str(i))
  chkdir = "processed/chk"+str(i)
  Path(chkdir).mkdir(parents=True, exist_ok=True)
  checkpoint_path = chkdir + "/cp.ckpt"
  checkpoint_dir = os.path.dirname(checkpoint_path)
  # Create a callback that saves the model's weights
  cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path, 
    save_weights_only=True, 
    period=10,
    #save_freq = 500,
    verbose=1)
  model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(94, activation='relu'),
    tf.keras.layers.Dense(94, activation='relu'),
    tf.keras.layers.Dense(94, activation='relu'),
    tf.keras.layers.Dense(2082, activation='softmax'),
  ])
  model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
  if os.path.isfile(chkdir+"/checkpoint"):
    print ("File exist")
    model.load_weights(checkpoint_path)
  else:
    print ("File not exist")
  #model.load_weights(checkpoint_path)
  #tf.keras.backend.set_floatx('float64')
  model.fit(x=l1, y=l2[:,i:i+1], callbacks=[cp_callback],epochs=epochcnt)
  return model

models = []
for i in range(0,10) :
   models.append(doModel(i, 11))

#model.evaluate(x_test,  y_test, verbose=2)


#testing
a= [5,6,7,8,9,6,10,11,6,12]
a.extend([0]*(94-len(a)))

for i in range(0,10):
  co = numpy.array(models[i].predict([a])[0])  
  print(numpy.where(co==max(co))[0][0])